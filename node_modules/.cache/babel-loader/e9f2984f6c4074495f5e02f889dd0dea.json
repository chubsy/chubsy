{"ast":null,"code":"var _jsxFileName = \"/Users/chloeshiau/Documents/chubsy/src/travel/travel.jsx\";\nimport React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport './styles/travel.less';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport worldData from './initialData';\n\nclass Travel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.afterOpenModal = () => {\n      // references are now sync'd and can be accessed.\n      subtitle.style.color = '#f00';\n    };\n\n    this.showModal = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.state = {\n      showModal: false\n    };\n    this.changeCountry = this.changeCountry.bind(this);\n  }\n\n  changeCountry(polygonTemplate) {\n    polygonTemplate.events.on(\"hit\", function (ev) {\n      const country = ev.target.dataItem.dataContext.id;\n\n      if (worldData[country] != undefined) {}\n\n      console.log(country);\n      console.log(worldData[country]);\n    });\n  }\n\n  componentDidMount() {\n    am4core.useTheme(am4themes_animated);\n    let map = am4core.create(\"travel-map\", am4maps.MapChart); // Set map definition\n\n    map.geodata = am4geodata_worldLow; // Set projection\n\n    map.projection = new am4maps.projections.Miller();\n    map.maxZoomLevel = 1;\n    map.seriesContainer.draggable = false;\n    map.seriesContainer.resizable = false; // Create map polygon series\n\n    const polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n    polygonSeries.data = [{\n      \"id\": \"US\",\n      \"selected\": true\n    }, {\n      \"id\": \"JP\",\n      \"selected\": true\n    }, {\n      \"id\": \"CN\",\n      \"selected\": true\n    }, {\n      \"id\": \"ID\",\n      \"selected\": true\n    }, {\n      \"id\": \"FR\",\n      \"selected\": true\n    }, {\n      \"id\": \"TW\",\n      \"selected\": true\n    }, {\n      \"id\": \"IT\",\n      \"selected\": true\n    }, {\n      \"id\": \"ES\",\n      \"selected\": true\n    }, {\n      \"id\": \"GR\",\n      \"selected\": true\n    }, {\n      \"id\": \"GB\",\n      \"selected\": true\n    }, {\n      \"id\": \"CH\",\n      \"selected\": true\n    }, {\n      \"id\": \"NL\",\n      \"selected\": true\n    }, {\n      \"id\": \"TH\",\n      \"selected\": true\n    }, {\n      \"id\": \"MX\",\n      \"selected\": true\n    }, {\n      \"id\": \"KR\",\n      \"selected\": true\n    }, {\n      \"id\": \"CA\",\n      \"selected\": true\n    }, {\n      \"id\": \"DK\",\n      \"selected\": true\n    }]; // Make map load polygon (like country names) data from GeoJSON\n\n    polygonSeries.useGeodata = true; // Configure series\n\n    const polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = am4core.color(\"#CCBBCE\");\n    this.changeCountry(polygonTemplate);\n    polygonTemplate.adapter.add(\"fill\", function (fill, target) {\n      if (target.dataItem.dataContext && target.dataItem.dataContext.selected) {\n        return am4core.color(\"#A571B0\");\n      }\n\n      return fill;\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"travel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"travel-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"love the world around you!\"), React.createElement(\"div\", {\n      className: \"travel-map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Open Modal\"), React.createElement(Modal, {\n      isOpen: this.state.showModal,\n      onAfterOpen: this.afterOpenModal,\n      onRequestClose: this.hideModal,\n      contentLabel: \"Example Modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      ref: _subtitle => subtitle = _subtitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Hello\"), React.createElement(\"button\", {\n      onClick: this.hideModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"close\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"I am a modal\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"tab navigation\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"stays\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"inside\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"the modal\"))));\n  }\n\n}\n\nexport default Travel;","map":{"version":3,"sources":["/Users/chloeshiau/Documents/chubsy/src/travel/travel.jsx"],"names":["React","Component","Modal","am4core","am4maps","am4themes_animated","am4geodata_worldLow","worldData","Travel","constructor","props","afterOpenModal","subtitle","style","color","showModal","setState","hideModal","state","changeCountry","bind","polygonTemplate","events","on","ev","country","target","dataItem","dataContext","id","undefined","console","log","componentDidMount","useTheme","map","create","MapChart","geodata","projection","projections","Miller","maxZoomLevel","seriesContainer","draggable","resizable","polygonSeries","series","push","MapPolygonSeries","data","useGeodata","mapPolygons","template","tooltipText","fill","adapter","add","selected","render","_subtitle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Modal from 'react-modal';\n\nimport './styles/travel.less';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport worldData from './initialData';\n\nclass Travel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false,\n    };\n\n    this.changeCountry = this.changeCountry.bind(this);\n  }\n\n  changeCountry(polygonTemplate) {\n    polygonTemplate.events.on(\"hit\", function(ev) {\n      const country = ev.target.dataItem.dataContext.id;\n      if(worldData[country] != undefined) {\n\n      }\n      console.log(country);\n      console.log(worldData[country]);\n    });\n  }\n\n  componentDidMount() {\n    am4core.useTheme(am4themes_animated);\n    let map = am4core.create(\"travel-map\", am4maps.MapChart);\n    // Set map definition\n    map.geodata = am4geodata_worldLow;\n\n    // Set projection\n    map.projection = new am4maps.projections.Miller();\n\n    map.maxZoomLevel = 1;\n    map.seriesContainer.draggable = false;\n    map.seriesContainer.resizable = false;\n\n    // Create map polygon series\n    const polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n\n    polygonSeries.data = [{\n      \"id\": \"US\",\n      \"selected\": true\n    }, {\n      \"id\": \"JP\",\n      \"selected\": true\n    }, {\n      \"id\": \"CN\",\n      \"selected\": true\n    }, {\n      \"id\": \"ID\",\n      \"selected\": true\n    }, {\n      \"id\": \"FR\",\n      \"selected\": true\n    }, {\n      \"id\": \"TW\",\n      \"selected\": true\n    }, {\n      \"id\": \"IT\",\n      \"selected\": true\n    }, {\n      \"id\": \"ES\",\n      \"selected\": true\n    }, {\n      \"id\": \"GR\",\n      \"selected\": true\n    }, {\n      \"id\": \"GB\",\n      \"selected\": true\n    }, {\n      \"id\": \"CH\",\n      \"selected\": true\n    }, {\n      \"id\": \"NL\",\n      \"selected\": true\n    }, {\n      \"id\": \"TH\",\n      \"selected\": true\n    }, {\n      \"id\": \"MX\",\n      \"selected\": true\n    }, {\n      \"id\": \"KR\",\n      \"selected\": true\n    }, {\n      \"id\": \"CA\",\n      \"selected\": true\n    }, {\n      \"id\": \"DK\",\n      \"selected\": true\n    }];\n\n    // Make map load polygon (like country names) data from GeoJSON\n    polygonSeries.useGeodata = true;\n\n    // Configure series\n    const polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = am4core.color(\"#CCBBCE\");\n    this.changeCountry(polygonTemplate);\n\n    polygonTemplate.adapter.add(\"fill\", function(fill, target) {\n      if (target.dataItem.dataContext && target.dataItem.dataContext.selected) {\n        return am4core.color(\"#A571B0\");\n      }\n      return fill;\n    });\n  }\n\n  afterOpenModal = () => {\n   // references are now sync'd and can be accessed.\n   subtitle.style.color = '#f00';\n }\n\n showModal = () => {\n   this.setState({ showModal: true });\n }\n\n hideModal = () => {\n   this.setState({ showModal: false });\n }\n  render() {\n    return (\n      <div className=\"travel\">\n        <div className=\"travel-description\">love the world around you!</div>\n        <div className=\"travel-map\"></div>\n        <button onClick={this.showModal}>Open Modal</button>\n        <Modal\n          isOpen={this.state.showModal}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.hideModal}\n          contentLabel=\"Example Modal\"\n        >\n\n          <h2 ref={_subtitle => (subtitle = _subtitle)}>Hello</h2>\n          <button onClick={this.hideModal}>close</button>\n          <div>I am a modal</div>\n          <form>\n            <input />\n            <button>tab navigation</button>\n            <button>stays</button>\n            <button>inside</button>\n            <button>the modal</button>\n          </form>\n        </Modal>\n      </div>\n\n    );\n  }\n}\n\nexport default Travel;\n"]},"metadata":{},"sourceType":"module"}