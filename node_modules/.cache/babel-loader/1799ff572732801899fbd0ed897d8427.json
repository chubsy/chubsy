{"ast":null,"code":"var _jsxFileName = \"/Users/chloeshiau/Documents/chubsy/src/travel/travel.jsx\";\nimport React, { Component } from 'react';\nimport './styles/travel.less';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport worldData from './initialData';\n\nclass Travel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showModal = () => {\n      this.setState({\n        show: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        show: false\n      });\n    };\n\n    this.state = {\n      show: false\n    };\n    this.changeCountry = this.changeCountry.bind(this);\n  }\n\n  changeCountry(polygonTemplate) {\n    polygonTemplate.events.on(\"hit\", function (ev) {\n      const country = ev.target.dataItem.dataContext.id;\n\n      if (worldData[country] != undefined) {}\n\n      console.log(country);\n      console.log(worldData[country]);\n    });\n  }\n\n  componentDidMount() {\n    am4core.useTheme(am4themes_animated);\n    let map = am4core.create(\"travel-map\", am4maps.MapChart); // Set map definition\n\n    map.geodata = am4geodata_worldLow; // Set projection\n\n    map.projection = new am4maps.projections.Miller();\n    map.maxZoomLevel = 1;\n    map.seriesContainer.draggable = false;\n    map.seriesContainer.resizable = false; // Create map polygon series\n\n    const polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n    polygonSeries.data = [{\n      \"id\": \"US\",\n      \"selected\": true\n    }, {\n      \"id\": \"JP\",\n      \"selected\": true\n    }, {\n      \"id\": \"CN\",\n      \"selected\": true\n    }, {\n      \"id\": \"ID\",\n      \"selected\": true\n    }, {\n      \"id\": \"FR\",\n      \"selected\": true\n    }, {\n      \"id\": \"TW\",\n      \"selected\": true\n    }, {\n      \"id\": \"IT\",\n      \"selected\": true\n    }, {\n      \"id\": \"ES\",\n      \"selected\": true\n    }]; // Make map load polygon (like country names) data from GeoJSON\n\n    polygonSeries.useGeodata = true; // Configure series\n\n    const polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = am4core.color(\"#CCBBCE\");\n    this.changeCountry(polygonTemplate);\n    polygonTemplate.adapter.add(\"fill\", function (fill, target) {\n      if (target.dataItem.dataContext && target.dataItem.dataContext.selected) {\n        return am4core.color(\"#A571B0\");\n      }\n\n      return fill;\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"travel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"travel-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"love the world around you!\"), React.createElement(\"div\", {\n      className: \"travel-map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Travel;","map":{"version":3,"sources":["/Users/chloeshiau/Documents/chubsy/src/travel/travel.jsx"],"names":["React","Component","am4core","am4maps","am4themes_animated","am4geodata_worldLow","worldData","Travel","constructor","props","showModal","setState","show","hideModal","state","changeCountry","bind","polygonTemplate","events","on","ev","country","target","dataItem","dataContext","id","undefined","console","log","componentDidMount","useTheme","map","create","MapChart","geodata","projection","projections","Miller","maxZoomLevel","seriesContainer","draggable","resizable","polygonSeries","series","push","MapPolygonSeries","data","useGeodata","mapPolygons","template","tooltipText","fill","color","adapter","add","selected","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './styles/travel.less';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport worldData from './initialData';\n\nclass Travel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n    };\n\n    this.changeCountry = this.changeCountry.bind(this);\n  }\n\n  showModal = () => {\n    this.setState({ show: true });\n  }\n\n  hideModal = () => {\n    this.setState({ show: false });\n  }\n\n  changeCountry(polygonTemplate) {\n    polygonTemplate.events.on(\"hit\", function(ev) {\n      const country = ev.target.dataItem.dataContext.id;\n      if(worldData[country] != undefined) {\n\n      }\n      console.log(country);\n      console.log(worldData[country]);\n    });\n  }\n\n  componentDidMount() {\n    am4core.useTheme(am4themes_animated);\n    let map = am4core.create(\"travel-map\", am4maps.MapChart);\n    // Set map definition\n    map.geodata = am4geodata_worldLow;\n\n    // Set projection\n    map.projection = new am4maps.projections.Miller();\n\n    map.maxZoomLevel = 1;\n    map.seriesContainer.draggable = false;\n    map.seriesContainer.resizable = false;\n\n    // Create map polygon series\n    const polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n\n    polygonSeries.data = [{\n      \"id\": \"US\",\n      \"selected\": true\n    }, {\n      \"id\": \"JP\",\n      \"selected\": true\n    }, {\n      \"id\": \"CN\",\n      \"selected\": true\n    }, {\n      \"id\": \"ID\",\n      \"selected\": true\n    }, {\n      \"id\": \"FR\",\n      \"selected\": true\n    }, {\n      \"id\": \"TW\",\n      \"selected\": true\n    }, {\n      \"id\": \"IT\",\n      \"selected\": true\n    }, {\n      \"id\": \"ES\",\n      \"selected\": true\n    }];\n\n    // Make map load polygon (like country names) data from GeoJSON\n    polygonSeries.useGeodata = true;\n\n    // Configure series\n    const polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = am4core.color(\"#CCBBCE\");\n    this.changeCountry(polygonTemplate);\n\n    polygonTemplate.adapter.add(\"fill\", function(fill, target) {\n      if (target.dataItem.dataContext && target.dataItem.dataContext.selected) {\n        return am4core.color(\"#A571B0\");\n      }\n      return fill;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"travel\">\n        <div className=\"travel-description\">love the world around you!</div>\n        <div className=\"travel-map\"></div>\n      </div>\n\n    );\n  }\n}\n\nexport default Travel;\n"]},"metadata":{},"sourceType":"module"}