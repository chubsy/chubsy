{"ast":null,"code":"var _jsxFileName = \"/Users/chloeshiau/Documents/my-app/src/Home/Home.jsx\";\nimport React, { Component } from \"react\"; // import ReactDOM from \"react-dom\";\n// import Navigation from '../Navigation/Navigation';\n\nimport Messages from '../Messages/Messages';\nimport './Home.css';\nconst URL = 'ws://localhost:3000/ws'; // var ws = new WebSocket(\"ws://localhost:3000/ws\");\n// WEBSOCKETS - transfers data through transmission control proticol (TCP)\n// REDUX - mapStateToProps is a function that holds whole store state\n\nclass MyApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: []\n    };\n    this.ws = new WebSocket(URL); // this.loadResponse = this.loadResponse.bind(this);\n\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n\n  componentDidMount() {\n    // this.loadResponse();\n    this.ws.onopen = () => {\n      console.log('connected');\n    };\n\n    this.ws.onmessage = evt => {\n      const message = JSON.parse(evt.data);\n      this.setState(state => ({\n        messages: [message, ...state.messages]\n      }));\n      console.log('messaging');\n    };\n\n    this.ws.onclose = () => {\n      // automatically try to reconnect after lost connectiong\n      console.log('disconnected');\n      this.setState({\n        ws: new WebSocket(URL)\n      });\n    };\n  }\n\n  submitMessage(messageString) {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = {\n      messages: messageString\n    }; // this.ws.send(JSON.stringify(message));\n    // this.setState(state => ({ messages : [message, ...state.messages] }));\n\n    const conn = new WebSocket(URL);\n\n    conn.onmessage = function (e) {\n      console.log(e.data);\n    };\n\n    conn.onopen = () => conn.send(JSON.stringify(message));\n\n    this.setState(state => ({\n      messages: [message, ...state.messages]\n    }));\n  } // if(window.location.pathname == \"/foodblog.html\") {\n  // \tvar feed = new Instafeed({\n  // \t  get: 'user',\n  // \t  userId: 1665792495,\n  // \t  target: 'foodpicture',\n  // \t  accessToken: '1665792495.fa1fbde.80d35431a95843bdbd779a1ce9498694',\n  // \t  resolution: 'standard_resolution',\n  // \t  template: '<a href=\"{{link}}\" target=\"_blank\"><img src=\"{{image}}\" /></a>',\n  // \t  limit: '10',\n  // \t  after: function() {\n  // \t\tvar el = document.getElementById('foodpicture');\n  // \t\tif (el.classList) {\n  // \t\t\tel.classList.add('show');\n  // \t\t} else\n  // \t\t\tel.className += ' ' + 'show';\n  // \t\t}\n  // \t});\n  // \tfeed.run();\n  // }\n  // async loadResponse() {\n  //   const token = '1665792495.9a6fcf8.7f3773a120884ae190265dfd3829089d';\n  //   let response =\n  //       await fetch(`https://api.instagram.com/v1/bonappechubs/media/recent?access_token=${token}`);\n  //   if (response.status === 200) {\n  //     let json = await response.json(); // (3)\n  //     console.log('hello');\n  //     return json;\n  //   }\n  // }\n\n\n  render() {\n    //       <Navigation />\n    console.log(this.state.messages);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Messages, {\n      ws: this.state.ws,\n      submitMessage: this.submitMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), this.state.messages.map((message, index) => React.createElement(\"p\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, message))));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/chloeshiau/Documents/my-app/src/Home/Home.jsx"],"names":["React","Component","Messages","URL","MyApp","constructor","props","state","messages","ws","WebSocket","submitMessage","bind","componentDidMount","onopen","console","log","onmessage","evt","message","JSON","parse","data","setState","onclose","messageString","conn","e","send","stringify","render","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import Navigation from '../Navigation/Navigation';\nimport Messages from '../Messages/Messages';\nimport './Home.css';\n\nconst URL = 'ws://localhost:3000/ws';\n// var ws = new WebSocket(\"ws://localhost:3000/ws\");\n// WEBSOCKETS - transfers data through transmission control proticol (TCP)\n\n\n// REDUX - mapStateToProps is a function that holds whole store state\n\nclass MyApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n    };\n\n    this.ws = new WebSocket(URL);\n\n    // this.loadResponse = this.loadResponse.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n\n  componentDidMount() {\n    // this.loadResponse();\n\n    this.ws.onopen = () => {\n      console.log('connected');\n    }\n\n    this.ws.onmessage = evt => {\n      const message = JSON.parse(evt.data);\n      this.setState(state => ({ messages : [message, ...state.messages] }));\n      console.log('messaging');\n\n    }\n    this.ws.onclose = () => {\n      // automatically try to reconnect after lost connectiong\n      console.log('disconnected');\n      this.setState({ ws: new WebSocket(URL) });\n    }\n  }\n\n  submitMessage(messageString) {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { messages: messageString };\n    // this.ws.send(JSON.stringify(message));\n    // this.setState(state => ({ messages : [message, ...state.messages] }));\n\n    const conn = new WebSocket(URL);\n    conn.onmessage = function(e){ console.log(e.data); };\n    conn.onopen = () => conn.send(JSON.stringify(message));\n    this.setState(state => ({ messages : [message, ...state.messages] }));\n  }\n  // if(window.location.pathname == \"/foodblog.html\") {\n  // \tvar feed = new Instafeed({\n  // \t  get: 'user',\n  // \t  userId: 1665792495,\n  // \t  target: 'foodpicture',\n  // \t  accessToken: '1665792495.fa1fbde.80d35431a95843bdbd779a1ce9498694',\n  // \t  resolution: 'standard_resolution',\n  // \t  template: '<a href=\"{{link}}\" target=\"_blank\"><img src=\"{{image}}\" /></a>',\n  // \t  limit: '10',\n  // \t  after: function() {\n  // \t\tvar el = document.getElementById('foodpicture');\n  // \t\tif (el.classList) {\n  // \t\t\tel.classList.add('show');\n  // \t\t} else\n  // \t\t\tel.className += ' ' + 'show';\n  // \t\t}\n  // \t});\n  // \tfeed.run();\n  // }\n\n  // async loadResponse() {\n  //   const token = '1665792495.9a6fcf8.7f3773a120884ae190265dfd3829089d';\n  //   let response =\n  //       await fetch(`https://api.instagram.com/v1/bonappechubs/media/recent?access_token=${token}`);\n  //   if (response.status === 200) {\n  //     let json = await response.json(); // (3)\n  //     console.log('hello');\n  //     return json;\n  //   }\n  // }\n  render() {\n    //       <Navigation />\n    console.log(this.state.messages);\n    return (\n      <div>\n        <Messages\n          ws={this.state.ws}\n          submitMessage={this.submitMessage}\n        />\n        {this.state.messages.map((message, index) =>\n          <p key={index}>\n            <em>{message}</em>\n          </p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}