{"version":3,"sources":["Messages/Messages.jsx","Home/Home.jsx","serviceWorker.js","index.js"],"names":["Messages","props","state","message","onSubmit","bind","e","preventDefault","this","submitMessage","setState","action","type","placeholder","value","onChange","target","Component","URL","MyApp","messages","ws","WebSocket","onopen","console","log","onmessage","msg","JSON","parse","data","onclose","messageString","conn","send","stringify","Object","keys","forEach","index","push","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAqCeA,E,YAlCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,IAGX,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBANC,E,sEASVC,GACPA,EAAEC,iBACFC,KAAKP,MAAMQ,cAAcD,KAAKN,MAAMC,SACpCK,KAAKE,SAAS,CAAEP,QAAS,O,+BAGjB,IAAD,OAEP,OACE,0BACEQ,OAAO,IACPP,SAAUI,KAAKJ,UAEjB,2BACEQ,KAAK,OACLC,YAAa,mBACbC,MAAON,KAAKN,MAAMC,QAClBY,SAAU,SAAAT,GAAC,OAAI,EAAKI,SAAS,CAAEP,QAASG,EAAEU,OAAOF,WAEnD,2BAAOF,KAAK,SAASE,MAAO,c,GA7BXG,aCIjBC,G,MAAM,0BAoGGC,E,YA5Fb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXkB,SAAU,GACVC,GAAI,MAIN,EAAKZ,cAAgB,EAAKA,cAAcJ,KAAnB,gBARJ,E,iFAWE,IAAD,OAElBG,KAAKa,GAAK,IAAIC,UAAUJ,GAExBV,KAAKa,GAAGE,OAAS,WACfC,QAAQC,IAAI,iBAGdjB,KAAKa,GAAGK,UAAY,SAAAC,GAClB,IAAMxB,EAAUyB,KAAKC,MAAMF,EAAIG,MAE/B,EAAKpB,UAAS,SAAAR,GAAK,MAAK,CAAEkB,SAAS,CAAEjB,GAAH,mBAAeD,EAAMkB,gBAEzDZ,KAAKa,GAAGU,QAAU,WAEhB,EAAKrB,SAAS,CAAEW,GAAI,IAAIC,UAAUJ,Q,oCAIxBc,GAEZ,IAAM7B,EAAU,CAAEiB,SAAUY,GAEtBC,EAAO,IAAIX,UAAUJ,GAC3Be,EAAKP,UAAY,SAASpB,GAAIkB,QAAQC,IAAInB,EAAEwB,OAC5CG,EAAKV,OAAS,kBAAMU,EAAKC,KAAKN,KAAKO,UAAUhC,KAC7CK,KAAKE,UAAS,SAAAR,GAAK,MAAK,CAAEkB,SAAQ,CAAIjB,GAAJ,mBAAgBD,EAAMkB,iB,+BAiChD,IAAD,OAEDA,EAAW,GAQjB,OAPAgB,OAAOC,KAAK7B,KAAKN,MAAMkB,UAAUkB,SAAQ,SAACX,EAAKY,GAC7CnB,EAASoB,KACP,uBAAGC,IAAKF,GACN,4BAAK,EAAKrC,MAAMkB,SAASO,GAAKP,eAKlC,6BACE,kBAAC,EAAD,CACEC,GAAIb,KAAKa,GACTZ,cAAeD,KAAKC,gBAErBW,O,GAvFWH,a,MCDAyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e12e16f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Messages extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.props.submitMessage(this.state.message);\n    this.setState({ message: '' });\n  }\n\n  render() {\n    //       <Navigation />\n    return (\n      <form\n        action=\".\"\n        onSubmit={this.onSubmit}\n      >\n      <input\n        type=\"text\"\n        placeholder={'Enter message...'}\n        value={this.state.message}\n        onChange={e => this.setState({ message: e.target.value })}\n      />\n      <input type=\"submit\" value={'Send'} />\n    </form>\n    );\n  }\n}\n\nexport default Messages;\n","import React, { Component } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import Navigation from '../Navigation/Navigation';\nimport Messages from '../Messages/Messages';\nimport './Home.css';\n\nconst URL = 'ws://localhost:3000/ws';\n// var ws = new WebSocket(\"ws://localhost:3000/ws\");\n// WEBSOCKETS - transfers data through transmission control proticol (TCP)\n\n\n// REDUX - mapStateToProps is a function that holds whole store state\n\nclass MyApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      ws: null,\n    };\n\n    // this.loadResponse = this.loadResponse.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n\n  componentDidMount() {\n\n    this.ws = new WebSocket(URL);\n\n    this.ws.onopen = () => {\n      console.log('is connected');\n    }\n\n    this.ws.onmessage = msg => {\n      const message = JSON.parse(msg.data);\n      // add to list of message\n      this.setState(state => ({ messages: [message, ...state.messages]}));\n    }\n    this.ws.onclose = () => {\n      // when its disconnected, reconnect\n      this.setState({ ws: new WebSocket(URL)})\n    }\n  }\n\n  submitMessage(messageString) {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { messages: messageString };\n\n    const conn = new WebSocket(URL);\n    conn.onmessage = function(e){ console.log(e.data); };\n    conn.onopen = () => conn.send(JSON.stringify(message));\n    this.setState(state => ({ messages : [message, ...state.messages] }));\n  }\n  // if(window.location.pathname == \"/foodblog.html\") {\n  // \tvar feed = new Instafeed({\n  // \t  get: 'user',\n  // \t  userId: 1665792495,\n  // \t  target: 'foodpicture',\n  // \t  accessToken: '1665792495.fa1fbde.80d35431a95843bdbd779a1ce9498694',\n  // \t  resolution: 'standard_resolution',\n  // \t  template: '<a href=\"{{link}}\" target=\"_blank\"><img src=\"{{image}}\" /></a>',\n  // \t  limit: '10',\n  // \t  after: function() {\n  // \t\tvar el = document.getElementById('foodpicture');\n  // \t\tif (el.classList) {\n  // \t\t\tel.classList.add('show');\n  // \t\t} else\n  // \t\t\tel.className += ' ' + 'show';\n  // \t\t}\n  // \t});\n  // \tfeed.run();\n  // }\n  // this.setState( state => ({ messages: [message, ...state.messages ] } ))\n\n  // async loadResponse() {\n  //   const token = '1665792495.9a6fcf8.7f3773a120884ae190265dfd3829089d';\n  //   let response =\n  //       await fetch(`https://api.instagram.com/v1/bonappechubs/media/recent?access_token=${token}`);\n  //   if (response.status === 200) {\n  //     let json = await response.json(); // (3)\n  //     console.log('hello');\n  //     return json;\n  //   }\n  // }\n  render() {\n    //       <Navigation />\n    const messages = [];\n    Object.keys(this.state.messages).forEach((msg, index) => {\n      messages.push(\n        <p key={index}>\n          <em>{this.state.messages[msg].messages}</em>\n        </p>\n      );\n    })\n    return (\n      <div>\n        <Messages\n          ws={this.ws}\n          submitMessage={this.submitMessage}\n        />\n        {messages}\n      </div>\n    );\n  }\n}\n\nexport default MyApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MyApp from './Home/Home';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MyApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// import ReactDOM from 'react-dom';\n// ReactDOM.render(< app />, document.getEleme)\n"],"sourceRoot":""}